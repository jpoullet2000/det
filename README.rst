=============================
Data Engineering Toolkit
=============================

Based on a REST API (Swagger generated server), it provides different services such as the creation of HDFS file/folders and their underlying purge/archiving, the access of cluster services and their parameters, etc.  

.. image:: https://user-images.githubusercontent.com/684574/40125807-188aeada-592c-11e8-9e7c-f97609c5648b.png


Overview
--------
This server was generated by the `swagger-codegen`_ project. By using the `OpenAPI-Spec`_ from a remote server, you can easily generate a server stub. This is an example of building a swagger-enabled Flask server.

This example uses the `Connexion`_ library on top of Flask.

.. _swagger-codegen: https://github.com/swagger-api/swagger-codegen
.. _OpenAPI-Spec: https://github.com/swagger-api/swagger-core/wiki
.. _Connexion: https://github.com/zalando/connexion  

Requirements
------------
Python 3.5+

Usage
-----
First you need to set up your credentials::

  chmod +x create_credentials.sh
  ./create_credentials.sh

And modify the file `~/.credentials.json` based on your current settings.
The 'TEST_FLAG' item should be switched to `false` to secure the app based on the API tokens.

To run the server, please execute the following from the root directory:: 

  pip install -r requirements.txt
  python setup.py install
  det runserver -p 8888 


and open your browser to here:: 

  http://localhost:8888/detapi/0.0.3/ui/

Your Swagger definition lives here::

  http://localhost:8888/detapi/0.0.3/swagger.json


To launch the integration tests, use tox::
 
  sudo pip install tox
  tox


The port 8888 is often taken by other apps, especially If your are running the det server on a machine with Hortonworks or Cloudera distro. In that case, you'd better choose a different port::

  det runserver -p <port>


For a detailed usage description of the command::

  det runserver --help


Running with Docker
-------------------
To run the server on a Docker container, please execute the following from the root directory:: 

  # building the image
  docker build -t det .

  # starting up a container
  docker run -p 8888:8888 det


Development
-----------
The API is based on the `swagger/swagger.yaml` file.
Code is generated with the `swagger code generator`_.
To run the code generator::

  java -jar <path_to_swagger-codegen-cli.jar_dir>/swagger-codegen-cli.jar generate -i det/swagger/swagger.yaml -l python-flask -o <output_dir> -c det/swagger/python_codegen_config.json

.. _`swagger code generator`: https://github.com/swagger-api/swagger-codegen 
 
